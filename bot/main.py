from datetime import datetime
import asyncio
from pathlib import Path

from aiogram import Bot
from loguru import logger

from data.database import SQLite_operations

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram
API_TOKEN = '5224696385:AAG23ZsTeQaW8dkhAUkT8w7a-0ybzKNcwJE'
# –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
CHAT_ID = '-1002101634086'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)


def get_messages(start_time):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π —Å {start_time} –ø–æ {current_time}")

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Path –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    current_dir = Path.cwd()
    dir_db = current_dir.parent
    path_db = dir_db.joinpath('data/DB.db')

    db = SQLite_operations(path_db, 'kwork')

    messages = db.select_by_datetime(start_time)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

    return messages


def format_order_message(title, link, description, date_create):
    message = f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n" \
              f"üîó –°—Å—ã–ª–∫–∞: {link}\n" \
              f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n" \
              f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {date_create}\n"
    return message


async def send_messages_to_chat(message):
    try:
        await bot.send_message(CHAT_ID, message)
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")


async def main():
    # start_time = '2024-02-10 00:14:50'
    start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    while True:
        messages = get_messages(start_time)
        if messages:
            start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        for message in messages:
            format_message = format_order_message(*message)
            await send_messages_to_chat(format_message)
        await asyncio.sleep(60 * 5)


def run_telegram_wrapper():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.add("logfile.log", rotation="500 MB", level="DEBUG")

    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())


if __name__ == '__main__':
    run_telegram_wrapper()
